#include<iostream>
#include<vector>
#include<algorithm>
#include<queue> 
#include<string>
#include<fstream>



using namespace std;

vector<int> v;
int N;

int arr[17][17] = { 0, };

void solve(int dddd) {
	for (int i = 0; i < N/2; i++) {
		v.push_back(1);
		v.push_back(0);
	}
	sort(v.begin(), v.end());

	vector<int> var1;
	vector<int> var2;
	long int min_value = 9999999;


	do {

		for (int i = 0; i < v.size(); i++) {
			if (v[i] == 1) var1.push_back(i);
			else {
				var2.push_back(i);
			}
		}
		sort(var1.begin(), var1.end());
		sort(var2.begin(), var2.end());

		long int accum1 = 0;
		long int accum2 = 0;
		for (int i = 0; i < var1.size()-1; i++) {
			for (int j = i+1; j < var1.size(); j++) {
				accum1 += arr[var1[i]][var1[j]] + arr[var1[j]][var1[i]];
			}
		}

		for (int i = 0; i < var2.size() - 1; i++) {
			for (int j = i+1; j < var2.size(); j++) {
				accum2 += arr[var2[i]][var2[j]] + arr[var2[j]][var2[i]];
			}
		}

		long temp_sum = abs(accum1 - accum2);
		
		if (temp_sum < min_value) {
			min_value = temp_sum;

		}

	var1.clear();
		var2.clear();


	} while (next_permutation(v.begin(), v.end()));

	printf("#%d %d\n", dddd, min_value);
	v.clear();
}


int main() {

	int T;
	scanf(" %d", &T);

	for (int idx = 1; idx <= T; idx++) {

		scanf(" %d", &N);
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				scanf(" %d", &arr[i][j]);
			}
		}
		solve(idx);
	
	}


	return 0;
}
