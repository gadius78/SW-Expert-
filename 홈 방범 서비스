#include<iostream>
#include<vector>
#include<algorithm>
#include<queue> 
#include<deque>
#include<string>
#include<memory.h>
#include<stdlib.h>
#include<tuple>


using namespace std;

int N,M,K;
int map[101][101] = { 0, };
bool visit[101][101] = { false, };

int dir[4][2] = { {-1,0},{1,0},{0,-1},{0,1} };
// 상 하 좌 우

bool is_range(int x, int y) {
	if (x < 0 || y < 0 || x >= N || y >= N) {
		return false;
	}
	else {
		return true;
	}
}

struct dd {
	int x;
	int y;
	int cnt;
};
queue<dd> q;

int cal_cost(int n) {
	return n * n + (n - 1)*(n - 1);
}
void clear_queue() {
	while (!q.empty()) {
		q.pop();
	}
}

int solve(int start_x, int start_y) {
	visit[start_x][start_y] = true;
	struct dd ss;
	ss.x = start_x;
	ss.y = start_y;
	ss.cnt = 1;
	q.push(ss);

	bool changed = false;
	int KK=0;
	int result = 0;

	while (!q.empty()) {
		struct dd now = q.front();
		int now_x = now.x;
		int now_y = now.y;
		int now_cnt = now.cnt;
		q.pop();	

		
		if (now_cnt > KK) {	

			changed = true;
			KK = now_cnt;
	
		}
		if (changed) {
			// Find
			int accum = 0;

			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					if (visit[i][j] && map[i][j] == 1) accum++;
				}
			}

			if (((accum*M) - cal_cost(KK)) >= 0) {

				if (result < accum) result = accum;

			}
		
		
#if 0
				cout << "result : " << result << endl;


				cout << "K : " << now_cnt << " || " << cal_cost(now_cnt) << " " << accum * M << endl;
				for (int i = 0; i < N; i++) {
					for (int j = 0; j < N; j++) {
						printf("%d ", visit[i][j]);
					}
					cout << endl;
				}
#endif		

		
			changed = false;
		
		}
		if (now_cnt > 2* N)
		{
			return result;

		}

	

		
		for (int i = 0; i < 4; i++) {
			int next_x = now_x + dir[i][0];
			int next_y = now_y + dir[i][1];
			int next_cnt = now_cnt + 1;
			if (is_range(next_x, next_y) && !visit[next_x][next_y]) {
				struct dd temp;
				temp.x = next_x;
				temp.y = next_y;
				temp.cnt = next_cnt;
				visit[next_x][next_y] = true;
				q.push(temp);
			}
		}

		
	}



	return result;


}

int main() {
	
	int T;
	scanf(" %d", &T);

	for (int idx = 1; idx <= T; idx++) {
		scanf(" %d %d", &N, &M);

		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				scanf(" %d", &map[i][j]);
			}
		}

		int result = 0;
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				result = max(result, solve(i, j));
				if (result == 4) cout << "왜 안되는겨 " << endl;
				fill(visit[0], visit[0] + 2500, false);
				clear_queue();
			}

		}

		printf("#%d %d\n", idx, result);

	}

#if 0
	cout << "K : " << endl;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {
			printf("%d ", visit[i][j]);
		}
		cout << endl;
	}
#endif



	return 0;
}
