#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<numeric>
#include<memory.h>
#include<time.h>
#include<deque>
#include<queue>
#include<set>
using namespace std;

int T;
int N, M,K;
int result = 0;

typedef struct t {
	int x;
	int y;

}tt;

int startx;
int starty;

int arr[101][101];
bool visit[101][101];

int dir[4][2] = { {0,1},{0,-1}, {1,0}, {-1,0} };


deque<int> q[4];
vector<pair<int, int>> v;

void rotate_queue(int num, int dir) {
	if (dir == 1) {
		int t = q[num].back();
		q[num].pop_back();
		q[num].push_front(t);
	}
	else if(dir ==-1){
		int t = q[num].front();
		q[num].pop_front();
		q[num].push_back(t);
	}
}

int check[4] = { 0 };
void search(int prev,int now) {
	if (now < prev ) {
		if (q[now][2] != q[prev][6]) {
			if (check[prev] == 1) {
				check[now] = -1;

			}
			else {
				check[now] = 1;

			}
			if (now - 1 >= 0)
			{
				search(now, now - 1);
			}
		}
	}
	else {
		if (q[prev][2] != q[now][6]) {
			if (check[prev] == 1) {
				check[now] = -1;

			}
			else {
				check[now] = 1;

			}
			if (now + 1 < 4)
			{
				search(now, now + 1);
			}
		}
	}
}
int sum_result = 0;
void sol() {

	
	for (int i = 0; i < K; i++) {
		pair<int, int> now = v[i];
		check[now.first-1] = now.second;
		if(now.first-1 !=3){
		search(now.first-1, now.first);
		}
		if(now.first-1 !=0){
			search(now.first-1, now.first - 2);
		}
#if 0
		for (int j = 0; j < 4; j++) {
			cout << check[j] << endl;
		}
#endif
		for (int j = 0; j < 4; j++) {
			if (check[j] != 0) {
				rotate_queue(j, check[j]);
			}
		}
#if 0
		cout << "################" << endl;
		
		for (int ie = 0; ie < 4; ie++) {
			for (int j = 0; j < 8; j++) {
				printf("%d ", q[ie][j]);
			}
			cout << endl;
		}
		cout << "################" << endl;
#endif


		memset(check, 0, sizeof(check));
	}
	for (int j = 0; j < 4; j++) {
		if (q[j][0] == 1)
		{
			sum_result += pow(2.0, j);
		}
	}
	
}
int main() {
	int M;
	scanf(" %d", &T);
	
	
	for (int ii = 1; ii <= T; ii++) {
		scanf(" %d", &K);
		
		int temp,temp2;
		int i;
		for (i = 0; i < 4; i++) {
			for (int j = 0; j < 8; j++) {
				scanf(" %d", &temp);
				q[i].push_back(temp);
			}
		}
		
		for (i = 0; i < K; i++) {
			scanf(" %d %d", &temp, &temp2);
			v.push_back(make_pair(temp, temp2));
		}
		sol();

		
		printf("#%d %d\n", ii, sum_result);
		v.clear();
		for (int i = 0; i < 4; i++) {
			q[i].clear();
		}
		sum_result = 0;

	}


	return 0;
}
